Intro:
1. Snapshots of your code (history of code/project)
2. Contribute to open source 
3. Repos
4. Which person made which change (commits)

Commands:
1.git (some helper)
2.git --version
3.git init (intialize and empty git repo , it is file which will keep track of changes in the project)
4.git status (tracks changes, tells us what changes are not in the history of the project)
5.git add . {[. for all files] [name of file for particular file]} (add files to the history of the project)
6.git commit -m "message" (commit the changes with a message , changes in the history are stored)
7.git restore --staged (reverts add. and sends it back to untrakced history (red when u use staus command))
8.git log to check the changes.
9.git reset 8cce5d71c0d6db9a18db5a7492336196204cdf8c (reverts to certain commit by using hashcode of that commit)
10.git stash (temply removing files from staging area and moving them to backstage so as to not to commit them yet nor lose them)
11.git stash pop (bring back changes saved in backstage)
12.git stash clear (clear those temp changes saved in back stage)
13.git remote add origin https://github.com/yashkarda06/github_test.git (attach git repo to local)
14.git remote -v (urls attached to local project folder)
origin  https://github.com/yashkarda06/github_test.git (fetch)
origin  https://github.com/yashkarda06/github_test.git (push)
15.git push origin master (push changes to remote repo)

Concepts:
1. Main/Master is the main codebase, when the code is not yet finalized we make use of branches.
2. Head (acts like a pointer) is used to identify where the commits are being made.So if head points to a branch (feature)
then commits are being made to feature branch.
3. Branches are like parallel universes, they are used to make changes to the code without affecting main code base.


